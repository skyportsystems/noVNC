'use strict';

var zlib = require('pako/lib/zlib/inflate.js');
var ZStream = require('pako/lib/zlib/zstream.js');

function Inflate() {
    this.strm = new ZStream();
    this.chunkSize = 1024 * 10 * 10;
    this.strm.output = new Uint8Array(this.chunkSize);
    this.windowBits = 5;

    zlib.inflateInit(this.strm, this.windowBits);
};

Inflate.prototype = {
    inflate: function (data, flush, expected) {
        this.strm.input = data;
        this.strm.avail_in = this.strm.input.length;
        this.strm.next_in = 0;
        this.strm.next_out = 0;

        // resize our output buffer if it's too small
        // (we could just use multiple chunks, but that would cause an extra
        // allocation each time to flatten the chunks)
        if (expected > this.chunkSize) {
            this.chunkSize = expected;
            this.strm.output = new Uint8Array(this.chunkSize);
        }

        this.strm.avail_out = this.chunkSize;

        zlib.inflate(this.strm, flush);

        return new Uint8Array(this.strm.output.buffer, 0, this.strm.next_out);
    },

    reset: function () {
        zlib.inflateReset(this.strm);
    }
};

module.exports = { Inflate: Inflate };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZmxhdG9yLm1vZC5qcyJdLCJuYW1lcyI6WyJ6bGliIiwicmVxdWlyZSIsIlpTdHJlYW0iLCJJbmZsYXRlIiwic3RybSIsImNodW5rU2l6ZSIsIm91dHB1dCIsIlVpbnQ4QXJyYXkiLCJ3aW5kb3dCaXRzIiwiaW5mbGF0ZUluaXQiLCJwcm90b3R5cGUiLCJpbmZsYXRlIiwiZGF0YSIsImZsdXNoIiwiZXhwZWN0ZWQiLCJpbnB1dCIsImF2YWlsX2luIiwibGVuZ3RoIiwibmV4dF9pbiIsIm5leHRfb3V0IiwiYXZhaWxfb3V0IiwiYnVmZmVyIiwicmVzZXQiLCJpbmZsYXRlUmVzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLE9BQU9DLFFBQVEsMEJBQVIsQ0FBWDtBQUNBLElBQUlDLFVBQVVELFFBQVEsMEJBQVIsQ0FBZDs7QUFFQSxTQUFTRSxPQUFULEdBQW1CO0FBQ2YsU0FBS0MsSUFBTCxHQUFZLElBQUlGLE9BQUosRUFBWjtBQUNBLFNBQUtHLFNBQUwsR0FBaUIsT0FBTyxFQUFQLEdBQVksRUFBN0I7QUFDQSxTQUFLRCxJQUFMLENBQVVFLE1BQVYsR0FBbUIsSUFBSUMsVUFBSixDQUFlLEtBQUtGLFNBQXBCLENBQW5CO0FBQ0EsU0FBS0csVUFBTCxHQUFrQixDQUFsQjs7QUFFQVIsU0FBS1MsV0FBTCxDQUFpQixLQUFLTCxJQUF0QixFQUE0QixLQUFLSSxVQUFqQztBQUNIOztBQUVETCxRQUFRTyxTQUFSLEdBQW9CO0FBQ2hCQyxhQUFTLFVBQVVDLElBQVYsRUFBZ0JDLEtBQWhCLEVBQXVCQyxRQUF2QixFQUFpQztBQUN0QyxhQUFLVixJQUFMLENBQVVXLEtBQVYsR0FBa0JILElBQWxCO0FBQ0EsYUFBS1IsSUFBTCxDQUFVWSxRQUFWLEdBQXFCLEtBQUtaLElBQUwsQ0FBVVcsS0FBVixDQUFnQkUsTUFBckM7QUFDQSxhQUFLYixJQUFMLENBQVVjLE9BQVYsR0FBb0IsQ0FBcEI7QUFDQSxhQUFLZCxJQUFMLENBQVVlLFFBQVYsR0FBcUIsQ0FBckI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBSUwsV0FBVyxLQUFLVCxTQUFwQixFQUErQjtBQUMzQixpQkFBS0EsU0FBTCxHQUFpQlMsUUFBakI7QUFDQSxpQkFBS1YsSUFBTCxDQUFVRSxNQUFWLEdBQW1CLElBQUlDLFVBQUosQ0FBZSxLQUFLRixTQUFwQixDQUFuQjtBQUNIOztBQUVELGFBQUtELElBQUwsQ0FBVWdCLFNBQVYsR0FBc0IsS0FBS2YsU0FBM0I7O0FBRUFMLGFBQUtXLE9BQUwsQ0FBYSxLQUFLUCxJQUFsQixFQUF3QlMsS0FBeEI7O0FBRUEsZUFBTyxJQUFJTixVQUFKLENBQWUsS0FBS0gsSUFBTCxDQUFVRSxNQUFWLENBQWlCZSxNQUFoQyxFQUF3QyxDQUF4QyxFQUEyQyxLQUFLakIsSUFBTCxDQUFVZSxRQUFyRCxDQUFQO0FBQ0gsS0FwQmU7O0FBc0JoQkcsV0FBTyxZQUFZO0FBQ2Z0QixhQUFLdUIsWUFBTCxDQUFrQixLQUFLbkIsSUFBdkI7QUFDSDtBQXhCZSxDQUFwQjs7QUEyQkFvQixPQUFPQyxPQUFQLEdBQWlCLEVBQUV0QixTQUFTQSxPQUFYLEVBQWpCIiwiZmlsZSI6ImluZmxhdG9yLm1vZC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB6bGliID0gcmVxdWlyZSgncGFrby9saWIvemxpYi9pbmZsYXRlLmpzJyk7XG52YXIgWlN0cmVhbSA9IHJlcXVpcmUoJ3Bha28vbGliL3psaWIvenN0cmVhbS5qcycpO1xuXG5mdW5jdGlvbiBJbmZsYXRlKCkge1xuICAgIHRoaXMuc3RybSA9IG5ldyBaU3RyZWFtKCk7XG4gICAgdGhpcy5jaHVua1NpemUgPSAxMDI0ICogMTAgKiAxMDtcbiAgICB0aGlzLnN0cm0ub3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5jaHVua1NpemUpO1xuICAgIHRoaXMud2luZG93Qml0cyA9IDU7XG5cbiAgICB6bGliLmluZmxhdGVJbml0KHRoaXMuc3RybSwgdGhpcy53aW5kb3dCaXRzKTtcbn07XG5cbkluZmxhdGUucHJvdG90eXBlID0ge1xuICAgIGluZmxhdGU6IGZ1bmN0aW9uIChkYXRhLCBmbHVzaCwgZXhwZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5zdHJtLmlucHV0ID0gZGF0YTtcbiAgICAgICAgdGhpcy5zdHJtLmF2YWlsX2luID0gdGhpcy5zdHJtLmlucHV0Lmxlbmd0aDtcbiAgICAgICAgdGhpcy5zdHJtLm5leHRfaW4gPSAwO1xuICAgICAgICB0aGlzLnN0cm0ubmV4dF9vdXQgPSAwO1xuXG4gICAgICAgIC8vIHJlc2l6ZSBvdXIgb3V0cHV0IGJ1ZmZlciBpZiBpdCdzIHRvbyBzbWFsbFxuICAgICAgICAvLyAod2UgY291bGQganVzdCB1c2UgbXVsdGlwbGUgY2h1bmtzLCBidXQgdGhhdCB3b3VsZCBjYXVzZSBhbiBleHRyYVxuICAgICAgICAvLyBhbGxvY2F0aW9uIGVhY2ggdGltZSB0byBmbGF0dGVuIHRoZSBjaHVua3MpXG4gICAgICAgIGlmIChleHBlY3RlZCA+IHRoaXMuY2h1bmtTaXplKSB7XG4gICAgICAgICAgICB0aGlzLmNodW5rU2l6ZSA9IGV4cGVjdGVkO1xuICAgICAgICAgICAgdGhpcy5zdHJtLm91dHB1dCA9IG5ldyBVaW50OEFycmF5KHRoaXMuY2h1bmtTaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RybS5hdmFpbF9vdXQgPSB0aGlzLmNodW5rU2l6ZTtcblxuICAgICAgICB6bGliLmluZmxhdGUodGhpcy5zdHJtLCBmbHVzaCk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHRoaXMuc3RybS5vdXRwdXQuYnVmZmVyLCAwLCB0aGlzLnN0cm0ubmV4dF9vdXQpO1xuICAgIH0sXG5cbiAgICByZXNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICB6bGliLmluZmxhdGVSZXNldCh0aGlzLnN0cm0pO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0geyBJbmZsYXRlOiBJbmZsYXRlIH07XG4iXX0=